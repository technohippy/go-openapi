package gen

import (
	"fmt"
	"github.com/cbroglie/mustache"
	"io/ioutil"
	"path/filepath"
)

type Generator struct {
	TemplateDir string
}

func NewGenerator(templateDir string) *Generator {
	return &Generator{templateDir}
}

func (g *Generator) Generate(config *OpenAPIObject) (string, error) {
	fileInfos, err := ioutil.ReadDir(g.TemplateDir)
	if err != nil {
		return "", err
	}
	for _, fileInfo := range fileInfos {
		if filepath.Ext(fileInfo.Name()) == ".mustache" {
			content, err := g.GenerateFromFile(fileInfo.Name(), config)
			if err != nil {
				return "", err
			}
			fmt.Println(content)
		}
	}
	return "", nil // TODO
}

func (g *Generator) GenerateFromFile(filename string, config *OpenAPIObject) (string, error) {
	fmt.Printf("generating %v...\n", filename)
	if filename != "README.mustache" { // TODO
		return "", nil
	}
	buf, err := ioutil.ReadFile(filepath.Join(g.TemplateDir, filename))
	if err != nil {
		return "", err
	}
	template := string(buf)
	renderer := &Renderer{}
	return renderer.Render(template, config)
}

type Renderer struct {
}

func (r *Renderer) Render(template string, config *OpenAPIObject) (string, error) {
	return mustache.Render(template, r.RenderContext(config))
}

func (r *Renderer) RenderContext(config *OpenAPIObject) map[string]interface{} {
	config.OperationTemplateVariable()
	return map[string]interface{}{
		"packageName":             "swagger",
		"appDescription":          "No description provided (generated by go-openapi https://github.com/technohippy/go-openapi)",
		"appVersion":              config.Info.Version,
		"packageVersion":          config.Info.Version, // TODO
		"hideGenerationTimestamp": true,
		"generatedDate":           "0000-00-00 00:00:00",
		"generatorClass":          "generator.go",
		"infoUrl":                 config.Info.Contact.Url,
		"basePath":                config.Servers[0].Url,
		"apiInfo":                 true,
		"apis": []struct {
			operations []struct {
				operation struct {
					classname            string
					operationId          string
					apiDocPath           string
					operationIdLowerCase string
					httpMethod           string
					path                 string
					summary              string
				}
			}
		}{},
		"models": []struct {
			model struct {
				classname    string
				modelDocPath string
			}
		}{},
		"authMethods": []interface{}{},
		"hasMore":     false,
		"infoEmail":   "dummy@dummy.com"}
}
